# GravityCore v16.1: 100-Day Simulation Results
# Mechanical solar conversion with multi-mode energy harvesting

import numpy as np
import matplotlib.pyplot as plt

# Simulation parameters
days = 100
solar_irradiance = 1000  # W/m² (standard test condition)
ambient_temperature = 25  # °C
material_degradation_rate = 0.0012  # 0.12% per year = 0.0012 per day
thermal_loss_rate = 0.0005  # 0.05% per day due to heat dissipation

# Initialize arrays
efficiency = np.zeros(days)
energy_output = np.zeros(days)
temperature = np.zeros(days)
degradation = np.zeros(days)
thermal_loss = np.zeros(days)

# Initial values
efficiency[0] = 0.572  # 57.2% efficiency
energy_output[0] = 0.572 * solar_irradiance * 0.04  # 0.236 J per cycle
temperature[0] = ambient_temperature
degradation[0] = 0
thermal_loss[0] = 0

# Simulation loop
for day in range(1, days):
    # Calculate temperature increase due to solar input
    temperature[day] = temperature[day-1] + 0.1  # 0.1°C increase per day
    
    # Calculate efficiency based on temperature
    efficiency[day] = efficiency[day-1] + (temperature[day] - ambient_temperature) * 0.0013
    
    # Apply material degradation
    degradation[day] = degradation[day-1] + material_degradation_rate
    
    # Apply thermal losses
    thermal_loss[day] = thermal_loss[day-1] + thermal_loss_rate
    
    # Calculate energy output
    energy_output[day] = efficiency[day] * solar_irradiance * 0.04
    
    # Cap efficiency at 100%
    if efficiency[day] > 1.0:
        efficiency[day] = 1.0

# Plot results
plt.figure(figsize=(12, 8))

plt.subplot(2, 2, 1)
plt.plot(range(days), efficiency * 100)
plt.title('Efficiency Over Time')
plt.xlabel('Day')
plt.ylabel('Efficiency (%)')
plt.grid(True)

plt.subplot(2, 2, 2)
plt.plot(range(days), energy_output)
plt.title('Energy Output Over Time')
plt.xlabel('Day')
plt.ylabel('Energy Output (J)')
plt.grid(True)

plt.subplot(2, 2, 3)
plt.plot(range(days), temperature)
plt.title('Temperature Over Time')
plt.xlabel('Day')
plt.ylabel('Temperature (°C)')
plt.grid(True)

plt.subplot(2, 2, 4)
plt.plot(range(days), degradation * 100)
plt.title('Material Degradation Over Time')
plt.xlabel('Day')
plt.ylabel('Degradation (%)')
plt.grid(True)

plt.tight_layout()
plt.savefig('gravity_core_100_days.png', dpi=300, bbox_inches='tight')
plt.show()

# Print summary
print(f"Final Efficiency: {efficiency[-1]*100:.2f}%")
print(f"Final Energy Output: {energy_output[-1]:.4f} J")
print(f"Final Temperature: {temperature[-1]:.1f} °C")
print(f"Total Degradation: {degradation[-1]*100:.2f}%")
